SINGLE_LINE_COMMENT #[^\n]*
WHITESPACE [ \n\r\t]+
BOOL (true|false)
HEX 0x[A-Fa-f0-9]+
NUMBER -?[0-9]+(\.[0-9]+)?
ID [A-Za-z_][A-Za-z0-9_]*
HEX_ESCAPE \\x[A-Fa-f0-9][A-Fa-f0-9]
UNI_ESCAPE \\x[A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9][A-Fa-f0-9]

%x DQ SQ

%%
{SINGLE_LINE_COMMENT} ;
{WHITESPACE} ;

->  return CASCADA_TOKEN_ARROW;
:  return CASCADA_TOKEN_COLON;
,  return CASCADA_TOKEN_COMMA;
"["  return CASCADA_TOKEN_LBRACKET;
"]"  return CASCADA_TOKEN_RBRACKET;
{  return CASCADA_TOKEN_LCURLY;
}  return CASCADA_TOKEN_RCURLY;
"("  return CASCADA_TOKEN_LPAREN;
")"  return CASCADA_TOKEN_RPAREN;

=  return CASCADA_TOKEN_OP_EQUALS;
"*"  return CASCADA_TOKEN_OP_MULT;
"/"  return CASCADA_TOKEN_OP_DIV;
%  return CASCADA_TOKEN_OP_MOD;
"+"  return CASCADA_TOKEN_OP_PLUS;
-  return CASCADA_TOKEN_OP_MINUS;

else  return CASCADA_TOKEN_ELSE;
final  return CASCADA_TOKEN_FINAL;
if  return CASCADA_TOKEN_IF;
return return CASCADA_TOKEN_RETURN;
then  return CASCADA_TOKEN_THEN;
var  return CASCADA_TOKEN_VAR;

{BOOL}  return CASCADA_TOKEN_BOOL;
{HEX} return CASCADA_TOKEN_HEX;
{NUMBER}  return CASCADA_TOKEN_NUMBER;
"\"" { BEGIN(DQ); return CASCADA_TOKEN_DOUBLE_QUOTE; }
"'" { BEGIN(SQ); return CASCADA_TOKEN_SINGLE_QUOTE; }
{ID}  return CASCADA_TOKEN_ID;

<DQ>"\"" { BEGIN(INITIAL); return CASCADA_TOKEN_DOUBLE_QUOTE; }
<SQ>"'" { BEGIN(INITIAL); return CASCADA_TOKEN_SINGLE_QUOTE; }

<DQ,SQ>{HEX_ESCAPE} { return CASCADA_TOKEN_STRING_HEX_ESCAPE; }
<DQ,SQ>{UNI_ESCAPE} { return CASCADA_TOKEN_STRING_UNI_ESCAPE; }
<DQ,SQ>. { return CASCADA_TOKEN_STRING_TEXT; }
